% Logging System, suggested by Potter, Sinclair, and Till, ex. 6.6

\begin{zed}
 [User, Word]
\end{zed}

\begin{schema}{LogSys}
  password: User \pfun Word \\
  reg, active: \finset User
\where
  active \subseteq reg = \dom password
\end{schema}

\begin{schema}{InitLogSys}
  LogSys'
\where
  password' = \emptyset \\
  active' = reg' = \emptyset
\end{schema}

\begin{theorem}{CanInitLogSys}
  \exists LogSys' @ InitLogSys
\end{theorem}
prove by reduce;

\begin{schema}{Register}
  \Delta LogSys \\
  u?: User; p?: Word
\where
  password' = password \cup \{ u? \mapsto p? \} \\
  active' = active
\end{schema}

% explore the precondition
try  \forall LogSys; u?: User; p?: Word @ \pre Register ;
prove by reduce;
% if u? is already registered, must have the given password.

% We'll prove something slightly weaker: we can register any
% not-already-registered user:

\begin{theorem}{preRegister}
   \forall LogSys; u?: User; p?: Word
          | u? \notin reg
          @ \pre Register
\end{theorem}
prove by reduce;

% a simple "sanity check" theorem
\begin{theorem}{RegisterAddsToReg}
  Register \implies reg' = reg \cup \{ u? \}
\end{theorem}
prove by reduce;

\begin{schema}{LogIn}
  \Delta LogSys \\
  u?: User \\
  p?: Word
\where
  u? \notin active \\
  p? = password (u?) \\
  password' = password \\
  active' = active \cup \{ u? \}
\end{schema}
% domain condition:
reduce;

% oops!
undo;

\begin{schema}{LogIn}
  \Delta LogSys \\
  u?: User \\
  p?: Word
\where
  u? \in reg \setminus active \\
  p? = password (u?) \\
  password' = password \\
  active' = active \cup \{ u? \}
\end{schema}
% domain condition:
reduce;

\begin{schema}{LogOut}
  \Delta LogSys \\
  u?: User
\where
  u? \in active \\
  password' = password \\
  active' = active \setminus \{ u? \}
\end{schema}

\begin{zed}
  LogInOut \defs LogIn \semi LogOut
\end{zed}

\begin{theorem}{LogInOutisXi}
  LogInOut \implies \Xi LogSys
\end{theorem}

invoke;
prove;
apply extensionality
  to predicate (active = active \cup[User] \{ u? \} \setminus \{ u? \});
prove;

\begin{schema}{Deregister}
  \Delta LogSys \\
  u?: User
\where
  u? \notin active \\
  password' = \{ u? \} \ndres password \\
  active' = active
\end{schema}

\begin{zed}
  RegDereg \defs Register \semi Deregister
\end{zed}

\begin{theorem}{RegDeregIsXi}
  \forall RegDereg @ \Xi LogSys
\end{theorem}

prove by reduce;
split u? \in \dom password;
rewrite;
% maybe not!  Need to assume u? \notin \dom password;
undo;

\begin{theorem}{RegDeregIsXi}
  \forall RegDereg | u? \notin reg @ \Xi LogSys
\end{theorem}
prove by reduce;
apply ndresNothing;
rewrite;

print status;

